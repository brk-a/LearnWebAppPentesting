# improper inventory management

#### API specific
#### Business specific
#### Exploitability: easy
#### Prevalence: widespread
#### Detectability: average
#### Technical: moderate


### threat agents/attack vectors
* threat agents get unauthorised access through old API versions or endpoints left running unpatched and using weaker security requirements
* in some cases exploits are available
* alternatively, they may get access to sensitive data through a 3rd party with whom there is no reason to share data with
### security weakness
* outdated documentation makes it more difficult to find and/or fix vulnerabilities
* lack of assets inventory and retirement strategies leads to running unpatched systems resulting in leakage of sensitive data
* it is common to find unnecessarily exposed API hosts because of modern concepts like microservices, which make applications easy to deploy and independent (e.g. cloud computing, K8S)
* simple google dorking, DNS enumeration or using specialised search engines for various types of servers (webcams, routers, servers, etc.) connected to the internet will be enough to discover targets

### impact
* attackers can gain access to sensitive data or even take over the server
* sometimes different API versions/deployments are connected to the same database with real data
* threat agents may exploit deprecated endpoints available in old API versions to get access to administrative functions or exploit known vulnerabilities

### example
*

### how To prevent
* inventory all API hosts and document important aspects of each one of them; focus on the API environment (e.g. production, staging, test, development), who should have network access to the host (e.g. public, internal, partners) and the API version
* inventory integrated services and document important aspects such as their role in the system, what data is exchanged (data flow) and their sensitivity
* document all aspects of your API such as authentication, errors, redirects, rate limiting, cross-origin resource sharing (CORS) policy and endpoints, including their parameters, requests and responses
* generate documentation automatically by adopting open standards; include the documentation build in your CI/CD pipeline
* make API documentation available only to those authorised to use the API
* use external protection measures such as API security specific solutions for all exposed versions of your APIs, not just for the current production version
* avoid using production data with non-production API deployments. if this is unavoidable, these endpoints should get the same security treatment as the production ones
* when newer versions of APIs include security improvements, perform a risk analysis to inform the mitigation actions required for the older versions. for example, whether it is possible to backport the improvements without breaking API compatibility or if you need to take the older version out quickly and force all clients to move to the latest version