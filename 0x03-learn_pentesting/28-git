#!/usr/bin/bash

# ** aim is to get to level 28
# git repo at `ssh://bandit27-git@localhost/home/bandit27-git/repo`
# password for `bandit27-git` is the same as that of `bandit27`
#clone repo and find the password for the next level

ls #nada
cd /tmp
mkdir getPass28
cd getPass28
git clone ssh://bandit27-git@localhost/home/bandit27-git/repo #permission
#denied. new approach

cd
mktemp -d #dir at /tmp/dir-name
cd /tmp/dir-name #use the dir name the system gives you
git clone ssh://bandit27-git@localhost:2220/home/bandit27-git/repo #use
#password for `bandit27`

#line 12 would have worked if we added `:2220` after `localhost`

ls #repo
cd repo
ls #README
cat README  #found password; copy to clipboard or use xclip

#using xclip; method 1, `awk`
awk '{print $(NF)}' | xclip
#using xclip; method 2, `rev`and `cut`
rev README | cut -d' ' -f1 | rev | xclip

exit #back to our machine

# ** if copied manually
echo p4ssWord > passwd #use the password you copied to clipboard
# ** if used xclip
xclip -o | cat > passwd

sshpass -p $(cat passwd) ssh bandit28@bandit.labs.overthewire.org -p 2220

# command `mktemp` creates a temporary file or directory, safely, and prints its name
# flag `d` tells it to create a directory. creates said dir/file in `/tmp` by default
# command `awk` allows pattern scanning and processing
# command `rev` copies the specified files to stdout after reversing the order of characters
# in every line. if no files are specified, stdin is read
# command `cut` prints selected parts of lines from a file to stdout. flag `d` tells it
# what delimiter to use instead of default tab; here, we use space as delimiter
# command `git` allows you to interact with git, the VCS
# type `man CMD_NAME` for each command in terminal and press ENTER
